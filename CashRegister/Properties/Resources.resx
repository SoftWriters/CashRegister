<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorGeneratingCashDictionary" xml:space="preserve">
    <value>The following error occurred while generating CashDictionary:</value>
  </data>
  <data name="ErrorRandomizingCashDictionary" xml:space="preserve">
    <value>The following error occurred while randomizing CashDictionary:</value>
  </data>
  <data name="ErrorSelectingInputFile" xml:space="preserve">
    <value>The following error occurred while selecting Input File:</value>
  </data>
  <data name="ErrorSettingControlProperties" xml:space="preserve">
    <value>The following error occurred while setting control properties: </value>
  </data>
  <data name="ErrorWhenApplyingReplaceWithPlurals" xml:space="preserve">
    <value>The following error occurred while executing ReplaceWithPlurals method:</value>
  </data>
  <data name="ErrorWhenClickingAboutLabel" xml:space="preserve">
    <value>The following error occurred while clicking About Cash Register link:</value>
  </data>
  <data name="ErrorWhenClosingAboutForm" xml:space="preserve">
    <value>The following error occurred while closing the About form:</value>
  </data>
  <data name="ErrorWhenExecutingGetMonetaryDenominationsDue" xml:space="preserve">
    <value>The following error occurred while executing ErrorWhenExecutingGetMonetaryDenominationsDue method:</value>
  </data>
  <data name="ErrorWhenExecutingOutputChangeToCustomer" xml:space="preserve">
    <value>The following error occurred while executing OutputChangeToCustomer method:</value>
  </data>
  <data name="ErrorWhileExitingApplication" xml:space="preserve">
    <value>The following error occurred while exiting the application:</value>
  </data>
  <data name="ErrorWhileResettingFields" xml:space="preserve">
    <value>The following error occurred while resetting fields: </value>
  </data>
  <data name="ErrorWhileRunningProccessToDownloadOutputFile" xml:space="preserve">
    <value>The following error occurred while running process to download output file: </value>
  </data>
  <data name="ProgramInformation" xml:space="preserve">
    <value>Welcome to the Cash Register! Please begin by pressing the ‘Open’ button and selecting a flat input file from your computer. It is expected that this file will contain one to many lines of data. Valid entries in the file will contain two decimal amounts separated by a comma. The first entry will represent total amount due and the second will represent the amount paid by the customer. The contents of the input file will be displayed for your reference in the textbox labeled ‘Contents of Input File.’ After all entries in the input file are processed, a link will be displayed with the title ‘Download Output File.’ You may download the resulting output file by clicking on this link. The output will also be displayed for your convenience in a textbox labeled ‘Contents of Output File.’ Each line in the input file will correspond to the same line in the output file that will be generated. If data is not in the correct format, the phrase ‘Invalid Input’ will be displayed. This will occur whenever the input data is not in the format mentioned above or when the amount paid is greater than the total amount due. This would result in a refund, which the Cash Register does not generate. If the input data is in the correct format, the change due to the customer will be printed using the minimal amount of physical change. If the data is in the correct format and the total amount due in cents is divisible by three, the change denominations will be randomized. This will be noted in the output with the following phrase: ‘(Total due in cents was divisible by 3; Denominations were randomly generated.)’ Thank you for using the Cash Register.</value>
  </data>
</root>